---
title: "CLIF Cohort Dashboard"
format: 
  dashboard:
    theme: custom.scss
---

```{r setup, include=FALSE}
library(tidyverse)
library(leaflet)
library(htmltools)
library(knitr)

# Read site data and fix coordinates
sites <- read.csv("data/site_details.csv", stringsAsFactors = FALSE) %>%
  mutate(
    # Replace en dash with regular minus sign and convert to numeric
    Longitude = as.numeric(str_replace(Longitude, "−", "-")),
    Latitude = as.numeric(Latitude)
  )

# Read metrics data
metrics <- read.csv("data/metrics_data.csv", stringsAsFactors = FALSE)

# Create marker icons using Font Awesome
icons <- awesomeIconList(
  ready = makeAwesomeIcon(
    icon = "check",
    markerColor = "green",
    iconColor = "white",
    library = "fa"
  ),
  pending = makeAwesomeIcon(
    icon = "clock",
    markerColor = "orange",
    iconColor = "white",
    library = "fa"
  )
)

# Add icon type to the data
sites$icon_type <- ifelse(sites$Data.Ready == "Yes", "ready", "pending")

# Helper function to get metric value and format
get_metric_with_format <- function(metric_name) {
  metrics %>% 
    filter(Site == "Consortium Aggregate", Metric == metric_name) %>% 
    select(Value, Display_Format) %>% 
    head(1)
}

# Helper function to format numbers with commas
format_number <- function(value) {
  format(as.numeric(gsub("[^0-9]", "", value)), big.mark=",")
}

# Helper function to get metric value
get_metric <- function(metric_name) {
  metrics %>% 
    filter(Site == "Consortium Aggregate", Metric == metric_name) %>% 
    pull(Value)
}

# Helper function to format large numbers
format_large_number <- function(value) {
  format(as.numeric(gsub("[^0-9]", "", value)), big.mark=",")
}

# Helper function to format median [Q1,Q3] values
format_median_iqr <- function(metric_name, show_iqr = FALSE) {
  metric_data <- get_metric_with_format(metric_name)
  value <- metric_data$Value
  format <- metric_data$Display_Format
  
  if(is.na(value) || value == "") return("N/A")
  
  # Extract numbers using regex
  numbers <- str_extract_all(value, "\\d+\\.?\\d*")[[1]]
  if(length(numbers) >= 3) {
    median <- as.numeric(numbers[1])
    q1 <- as.numeric(numbers[2])
    q3 <- as.numeric(numbers[3])
    
    if(show_iqr) {
      return(sprintf("%.1f [%.1f, %.1f]", median, q1, q3))
    } else {
      return(sprintf("%.1f", median))
    }
  }
  return(value)
}

# Helper function to format n (%) values
format_percentage <- function(metric_name, show_n = FALSE) {
  metric_data <- get_metric_with_format(metric_name)
  value <- metric_data$Value
  format <- metric_data$Display_Format
  
  if(is.na(value) || value == "") return("N/A")
  
  # Extract numbers using regex
  n_match <- str_extract(value, "\\d+(?=\\s*\\()")  # Get number before parentheses
  pct_match <- str_extract(value, "\\d+\\.?\\d*(?=%\\))")  # Get percentage
  
  if(!is.na(pct_match)) {
    if(show_n && !is.na(n_match)) {
      return(sprintf("%s (%s%%)", format_large_number(n_match), pct_match))
    } else {
      return(sprintf("%s%%", pct_match))
    }
  }
  return(value)
}
```

# Home

## Row {.no-padding .g-0}
```{=html}
<style>
.no-padding {
  padding: 0 !important;
  margin: 0 !important;
}

.g-0 {
  --bs-gutter-x: 0 !important;
  --bs-gutter-y: 0 !important;
}

.top-stats {
  display: flex;
  flex-direction: row;
  gap: 1rem;
  width: 100vw;
  margin: 0;
  padding: 1rem;
  background: white;
  justify-content: space-between;
}

.stat-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
  background: transparent;
  border-radius: 4px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  flex: 1;
  min-width: 120px;
}

.stat-icon {
  width: 24px;
  height: 24px;
  margin-bottom: 0.5rem;
  opacity: 0.7;
}

.stat-label {
  color: #983232;
  font-size: 0.8rem;
  opacity: 0.7;
  text-align: center;
  margin-bottom: 0.25rem;
  white-space: nowrap;
}

.stat-value {
  color: #983232;
  font-size: 1.5rem;
  font-weight: bold;
  text-align: center;
}

/* Tablet Styles */
@media screen and (max-width: 1024px) {
  .top-stats {
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  
  .stat-card {
    flex: 1 1 calc(25% - 0.75rem);
    min-width: calc(25% - 0.75rem);
  }
}

/* Mobile Styles */
@media screen and (max-width: 768px) {
  .top-stats {
    gap: 0.35rem;
    padding: 0.5rem;
    width: 100%;
    justify-content: center;
  }
  
  .stat-card {
    flex: 0 1 calc(33.33% - 0.35rem);
    min-width: calc(33.33% - 0.35rem);
    padding: 0.5rem;
    margin-bottom: 0.35rem;
  }
  
  .stat-icon {
    width: 18px;
    height: 18px;
    margin-bottom: 0.25rem;
  }
  
  .stat-label {
    font-size: 0.7rem;
    line-height: 1.2;
    margin-bottom: 0.15rem;
  }
  
  .stat-value {
    font-size: 1.1rem;
    line-height: 1.2;
  }
}

/* Small Mobile Styles */
@media screen and (max-width: 480px) {
  .top-stats {
    padding: 0.35rem;
    gap: 0.25rem;
  }
  
  .stat-card {
    flex: 0 1 calc(50% - 0.25rem);
    min-width: calc(50% - 0.25rem);
    padding: 0.35rem;
    margin-bottom: 0.25rem;
  }
  
  .stat-icon {
    width: 16px;
    height: 16px;
    margin-bottom: 0.15rem;
  }
  
  .stat-label {
    font-size: 0.65rem;
    margin-bottom: 0.1rem;
  }
  
  .stat-value {
    font-size: 1rem;
  }
}

.stat-card.encounters {
  display: flex;
  flex-direction: column;
}

.encounters .number-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  order: 2;
}

.encounters .stat-icon {
  width: 1.5rem;
  height: 1.5rem;
  margin: 0;
}

.encounters .stat-label {
  order: 1;
}

.encounters .stat-value {
  margin: 0;
}

.stat-card.with-icon {
  display: flex;
  flex-direction: column;
}

.with-icon .value-container {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  width: 100%;
}

.with-icon .stat-icon {
  margin-right: 0.5rem;
}

.with-icon .stat-value {
  flex: 1;
  text-align: left;
}

.stat-card.hospital {
  text-align: left;
  padding: 1rem;
}

.hospital .stat-label {
  text-align: left;
  margin-bottom: 0.5rem;
}

.hospital .value-row {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.hospital .stat-icon {
  width: 2.5rem;
  height: 2.5rem;
}

.hospital .stat-value {
  text-align: left;
  font-size: 2rem;
}
</style>

<div class="top-stats">
  <div class="stat-card">
    <img src="icons/encounters.svg" class="stat-icon" alt="encounters">
    <div class="stat-label">Total ICU Encounters</div>
    <div class="stat-value">`r format_large_number(get_metric("N: ICU encounters"))`</div>
  </div>
  
  <div class="stat-card">
    <img src="icons/patients.svg" class="stat-icon" alt="patients">
    <div class="stat-label">Patients</div>
    <div class="stat-value">`r format_large_number(get_metric("N: Unique patients"))`</div>
  </div>
  
  <div class="stat-card">
    <img src="icons/years.svg" class="stat-icon" alt="years">
    <div class="stat-label">Years</div>
    <div class="stat-value">`r get_metric("Years")`</div>
  </div>
  
  <div class="stat-card">
    <img src="icons/hospitals.svg" class="stat-icon" alt="hospitals">
    <div class="stat-label">Hospitals</div>
    <div class="stat-value">`r format_large_number(get_metric("Hospitals "))`</div>
  </div>
  
  <div class="stat-card">
    <img src="icons/days.svg" class="stat-icon" alt="days">
    <div class="stat-label">Hospital Length of Stay (days)</div>
    <div class="stat-value">`r format_median_iqr("Total hospital days, median [Q1,Q3]")`</div>
  </div>
  
  <div class="stat-card">
    <img src="icons/sex.svg" class="stat-icon" alt="female">
    <div class="stat-label">Female</div>
    <div class="stat-value">`r format_percentage("Sex n (%): Female")`</div>
  </div>
  
  <div class="stat-card">
    <img src="icons/race.svg" class="stat-icon" alt="race">
    <div class="stat-label">White</div>
    <div class="stat-value">61.5%</div>
  </div>
  
  <div class="stat-card">
    <img src="icons/hispanic.svg" class="stat-icon" alt="hispanic">
    <div class="stat-label">Hispanic</div>
    <div class="stat-value">`r format_percentage("Ethnicity n (%): Hispanic")`</div>
  </div>

  <div class="stat-card">
    <img src="icons/mortality.svg" class="stat-icon" alt="hispanic">
    <div class="stat-label">Mortality</div>
    <div class="stat-value">`r format_percentage("Hospital mortality n (%)")`</div>
  </div>

  <div class="stat-card">
    <img src="icons/sofa.svg" class="stat-icon" alt="sofa">
    <div class="stat-label">SOFA Median</div>
    <div class="stat-value">`r format_median_iqr("SOFA-97 TOTAL, median [Q1,Q3]")`</div>
  </div>
</div>
```

## Row {.mt-3}
### Map {width=70%}
```{r map}
#| out.width: "100%"
#| out.height: "500px"

leaflet(sites) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -98.5795, lat = 39.8283, zoom = 4) %>%
  addAwesomeMarkers(
    ~Longitude, ~Latitude,
    icon = ~icons[icon_type],
    popup = ~paste0(
      "<b>", Site, "</b><br>",
      "Location: ", `City..State.Province`, "<br>",
      "Hospitals: ", `Hospitals`, "<br>",
      "Total ICU Encounters: ", `Encounters`, "<br>",
      "Total Patients: ", `Patients`, "<br>",
      "Status: ", if_else(Data.Ready == "Yes", 
                         "<span style='color: green;'>Ready</span>", 
                         "<span style='color: orange;'>Pending</span>")
                   
    ),
    label = ~Site,
    clusterOptions = markerClusterOptions()
  ) %>%
  addLegend(
    position = "bottomright",
    colors = c("#4DAF4A", "#FF7F00"),
    labels = c("Ready", "Pending"),
    title = "Site Status"
  )
```

### Details {.tabset width=30%}

#### IMV Encounters
::: {.mb-8}
<div class="stat-card" style="margin-bottom: 1rem; background: transparent;">
  <img src="icons/vent.svg" alt="vent" style="width: 90px; height: 64px;">
  <div class="stat-value" style="margin-bottom: 1rem;">`r format_percentage("IMV encounters n (%)")`</div>
  <div class="stat-label" >Encounters received mechanical ventilation</div>
</div>

<div style="height: auto; margin-top: 1rem;">
```{r imv-locations}
library(plotly)

# Create data frame for the chart
locations <- data.frame(
  Location = c("ICU", "ED", "Procedural", "Ward", "Other"),
  Count = c(230002, 42526, 16986, 12999, 4154),
  Percentage = c(75.0, 13.9, 5.5, 4.2, 1.4)
)

# Create custom color palette - adjusted to match image
colors <- c("#983232", "#B25959", "#CC8080", "#E6A6A6", "#FFD9D9")

# Create the donut chart
plot_ly(locations, labels = ~Location, values = ~Percentage, type = 'pie',
        hole = 0.6,
        marker = list(colors = colors),
        textposition = 'outside',
        textinfo = 'label+percent',
        hovertemplate = paste0(
          "%{label}<br>",
          "Count: %{customdata:,.0f}<br>",
          "Percentage: %{percent}<br>",
          "<extra></extra>"
        ),
        customdata = ~Count) %>%
  layout(
    showlegend = FALSE,
    title = list(
      text = "First Location of Intubation",
      y = 0.95,
      x = 0.5,
      xanchor = 'center',
      yanchor = 'top',
      font = list(
        color = '#983232',
        size = 16,
        family = "Inter"
      )
    ),
    paper_bgcolor = 'rgba(0,0,0,0)',
    plot_bgcolor = 'rgba(0,0,0,0)',
    margin = list(t = 60, l = 20, r = 20, b = 20),
    autosize = TRUE,
    # Make it a semi-circle
    polar = list(
      sector = c(0, 180)
    ),
    # Adjust the chart domain to show full semi-circle
    xaxis = list(domain = c(0.1, 0.9)),
    yaxis = list(domain = c(0, 0.95))
  )
```
</div>
:::

#### Ventilator Settings {.tabset}

##### Initial Mode of Ventilation

```{r vent-modes}
library(plotly)

# Create data frame for ventilation modes
vent_modes <- data.frame(
  Mode = c("Assist Control-Volume Control", 
           "Pressure-Regulated Volume Control",
           "SIMV",
           "Pressure support/CPAP",
           "Pressure Control",
           "Volume Support",
           "Other"),
  Count = c(183708, 39011, 32647, 21700, 7851, 79, 22046),
  Percentage = c(59.9, 12.7, 10.6, 7.1, 2.5, 0.0, 7.2)
)

# Sort by percentage in descending order
vent_modes <- vent_modes[order(-vent_modes$Percentage),]

# Create a color palette - using more distinct shades
colors <- c('#983232', '#CC8080', '#E6A6A6', '#B25959', '#FFB3B3', '#FFCCCC', '#FFE6E6')

# Create the vertical bar plot
plot_ly() %>%
  add_trace(
    data = vent_modes,
    x = ~seq_along(Mode),
    y = ~Percentage,
    type = 'bar',
    name = ~Mode,
    marker = list(color = colors),
    text = ~paste0(sprintf("%.1f", Percentage), "%"),
    textposition = 'outside',
    hovertemplate = paste0(
      "<b>%{data.name}</b><br>",
      "Count: %{customdata:,.0f}<br>",
      "Percentage: %{y:.1f}%<br>",
      "<extra></extra>"
    ),
    customdata = ~Count
  ) %>%
  layout(
    title = list(
      text = "Initial Mode of Ventilation",
      font = list(
        color = '#983232',
        size = 16,
        family = "Inter"
      ),
      y = 0.95
    ),
    yaxis = list(
      title = "Percentage of Encounters (%)",
      showgrid = TRUE,
      gridcolor = '#E5E5E5',
      zeroline = FALSE,
      range = c(0, max(vent_modes$Percentage) * 1.2)
    ),
    xaxis = list(
      title = "",
      showticklabels = FALSE,
      showgrid = FALSE
    ),
    paper_bgcolor = 'rgba(0,0,0,0)',
    plot_bgcolor = 'rgba(0,0,0,0)',
    margin = list(l = 50, r = 20, t = 50, b = 100),
    legend = list(
      orientation = "h",
      xanchor = "center",
      x = 0.5,
      y = -0.2,
      yanchor = "top",
      bgcolor = 'rgba(255, 255, 255, 0.9)',
      bordercolor = 'rgba(152, 50, 50, 0.2)',
      borderwidth = 1,
      font = list(size = 11),
      traceorder = "normal"
    ),
    showlegend = TRUE,
    font = list(family = "Inter"),
    bargap = 0.4,
    height = 400,
    autosize = TRUE
  )
```

##### Initial Settings

```{r vent-settings-table}
library(knitr)
library(kableExtra)

# Create data frame for ventilator settings
vent_settings <- data.frame(
  Setting = c("FiO2", "PEEP", "Respiratory rate", "Tidal Volume"),
  `Median [IQR]` = c(
    "0.4 [0.3,0.6]",
    "5.0 [5.0,8.0]",
    "16.0 [12.0,21.0]",
    "450.0 [380.0,500.0]"
  )
)

kable(vent_settings, 
      format = "html",
      escape = FALSE,
      align = c("l", "l"),
      col.names = c("Setting", "Median [IQR]")) %>%
  kable_styling(bootstrap_options = "condensed",
                full_width = TRUE,
                position = "left",
                font_size = 14) %>%
  row_spec(0, bold = TRUE) %>%
  row_spec(seq(1,4,2), background = "#f8f9fa")
```

<div style="color: #666; font-size: 0.8rem; margin-top: 1rem;">
Units: FiO2 (fraction), PEEP (cmH2O), Respiratory rate (breaths/min), Tidal Volume (mL)
</div>

#### Vasopressors

::: {.mb-5}
<div class="stat-card" style="margin-bottom: 2rem; background: transparent;">
  <img src="icons/vasopressors.svg" alt="vasopressor" style="width: 64px; height: 64px;">
  <div class="stat-value">`r format_percentage("Vasopressor encounters n (%)")`</div>
  <div class="stat-label">Encounters received Vasopressors</div>
</div>

```{r vasopressor-table}
library(knitr)
library(kableExtra)

# Create data frame directly with just the medications and their values
vasopressor_data <- data.frame(
  Medication = c("Phenylephrine", "Norepinephrine", "Vasopressin", "Angiotensin", 
                "Dopamine", "Epinephrine"),
  `Median [IQR]` = c(
    get_metric("Phenylephrine dose, median [Q1,Q3]"),
    get_metric("Norepinephrine dose, median [Q1,Q3]"),
    get_metric("Vasopressin dose, median [Q1,Q3]"),
    get_metric("Angiotensin dose, median [Q1,Q3]"),
    get_metric("Dopamine dose, median [Q1,Q3]"),
    get_metric("Epinephrine dose, median [Q1,Q3]")
  )
)

kable(vasopressor_data, 
      format = "html",
      escape = FALSE,
      align = c("l", "l"),
      col.names = c("Medication", "Median [IQR]")) %>%
  kable_styling(bootstrap_options = "condensed",
                full_width = FALSE,
                position = "left",
                font_size = 13) %>%
  column_spec(1, width = "150px") %>%
  column_spec(2, width = "150px") %>%
  row_spec(0, bold = TRUE) %>%
  row_spec(seq(1,6,2), background = "#f8f9fa")
```

<div style="color: #666; font-size: 0.8rem; margin-top: 1rem;">
The unit of measurement for all medications presented here is mcg/kg/min, except vasopressin, for which we use units/min
</div>
:::

# Status Tracker

```{r status-tracker-setup, include=FALSE}
# Read table status data
table_status <- read.csv("data/table_status.csv", stringsAsFactors = FALSE)
status_summary <- jsonlite::fromJSON("data/table_status_summary.json")

# Read site-specific status data
site_status_aggregated <- jsonlite::fromJSON("data/site_status_aggregated.json")

# Read individual site status files
site_files <- list.files("data/site_status", pattern = ".*_status\\.json$", full.names = TRUE)
site_status_list <- list()
for(file in site_files) {
  site_data <- jsonlite::fromJSON(file)
  site_id <- site_data$site_id
  site_status_list[[site_id]] <- site_data
}

# Create status color mapping
status_colors <- c(
  "Complete" = "#28a745",      # Green
  "In progress" = "#007bff",   # Blue  
  "Not started" = "#6c757d"    # Gray
)

# Helper function to create professional status icons
create_status_icon <- function(status) {
  icons <- list(
    "Complete" = "✓",
    "In progress" = "◐", 
    "Not started" = "○"
  )
  return(icons[[status]])
}

# Helper function to create clean status indicator (color box only)
create_status_cell <- function(status, completeness = NULL) {
  # Determine status info
  if(!is.null(completeness)) {
    percentage <- round(completeness * 100)
  } else {
    percentage <- ifelse(status == "Complete", 100, 
                        ifelse(status == "In progress", 50, 0))
  }
  
  # Burgundy to beige color scheme - return only colored box
  if(percentage == 100) {
    return('<div style="width: 20px; height: 20px; background: #7d1538; border: 1px solid #5d1028; margin: 0 auto;"></div>')
  } else if(percentage >= 75) {
    return('<div style="width: 20px; height: 20px; background: #983248; border: 1px solid #7d1538; margin: 0 auto;"></div>')
  } else if(percentage > 0) {
    return('<div style="width: 20px; height: 20px; background: #c4898d; border: 1px solid #983248; margin: 0 auto;"></div>')
  } else {
    return('<div style="width: 20px; height: 20px; background: #f5e6d8; border: 1px solid #e0c4a8; margin: 0 auto;"></div>')
  }
}

# Helper function to create site status summary
create_site_status_summary <- function() {
  site_summary <- data.frame()
  
  for(site_id in names(site_status_aggregated$sites)) {
    site_info <- site_status_aggregated$sites[[site_id]]
    site_summary <- rbind(site_summary, data.frame(
      site_name = site_info$site_name,
      completion = round(site_info$overall_completion * 100, 1),
      complete_tables = site_info$complete_tables,
      total_tables = site_info$total_tables,
      status = site_info$status,
      last_updated = site_info$last_updated,
      stringsAsFactors = FALSE
    ))
  }
  
  # Sort by completion percentage descending
  site_summary <- site_summary[order(-site_summary$completion),]
  return(site_summary)
}
```

## Row {height="100vh"}

### CLIF Consortium Progress Overview {width=20%}
```{r site-completion-overview}
library(htmltools)

# Get site summary data
site_summary <- create_site_status_summary()

# Create CLIF cylinder visualization for each site
create_clif_cylinder <- function(site_name, completion, complete_tables, total_tables) {
  # Calculate fill percentage
  fill_percentage <- completion
  
  # Determine liquid color based on completion
  if(completion == 100) {
    liquid_color <- "#7d1538"
    glow_color <- "#983248"
  } else if(completion >= 75) {
    liquid_color <- "#983248"
    glow_color <- "#b85b72"
  } else if(completion >= 50) {
    liquid_color <- "#c4898d" 
    glow_color <- "#d4a4a8"
  } else {
    liquid_color <- "#f5e6d8"
    glow_color <- "#f8ece2"
  }
  
  paste0(
    '<div style="display: flex; flex-direction: column; align-items: center; margin: 1rem; min-width: 140px;">',
    
    # Site name label
    '<div style="font-size: 0.8rem; font-weight: 600; color: #495057; margin-bottom: 0.5rem; text-align: center;">',
    gsub("University", "Univ.", gsub("University of ", "", site_name)),
    '</div>',
    
    # CLIF Cylinder Container
    '<div style="position: relative; width: 80px; height: 120px; margin-bottom: 0.5rem;">',
    
    # Cylinder body (3D effect)
    '<div style="',
    'position: absolute; ',
    'bottom: 0; ',
    'left: 10px; ',
    'width: 60px; ',
    'height: 100px; ',
    'background: linear-gradient(90deg, #f8f9fa 0%, #ffffff 50%, #f1f3f4 100%); ',
    'border: 2px solid #dee2e6; ',
    'border-radius: 0 0 8px 8px; ',
    'box-shadow: inset 2px 0 4px rgba(0,0,0,0.1); ',
    '"></div>',
    
    # Liquid fill
    '<div style="',
    'position: absolute; ',
    'bottom: 2px; ',
    'left: 12px; ',
    'width: 56px; ',
    'height: ', (fill_percentage * 0.96), 'px; ',
    'background: linear-gradient(90deg, ', liquid_color, ' 0%, ', glow_color, ' 50%, ', liquid_color, ' 100%); ',
    'border-radius: 0 0 6px 6px; ',
    'opacity: 0.9; ',
    'transition: height 0.8s ease-in-out; ',
    '"></div>',
    
    # Cylinder top (ellipse)
    '<div style="',
    'position: absolute; ',
    'top: 0; ',
    'left: 10px; ',
    'width: 60px; ',
    'height: 20px; ',
    'background: linear-gradient(90deg, #e9ecef 0%, #ffffff 50%, #e9ecef 100%); ',
    'border: 2px solid #dee2e6; ',
    'border-radius: 50%; ',
    'box-shadow: 0 2px 4px rgba(0,0,0,0.1); ',
    '"></div>',
    
    # CLIF Label on cylinder
    '<div style="',
    'position: absolute; ',
    'top: 50%; ',
    'left: 50%; ',
    'transform: translate(-50%, -50%); ',
    'font-size: 0.6rem; ',
    'font-weight: 700; ',
    'color: #7d1538; ',
    'text-shadow: 1px 1px 2px rgba(255,255,255,0.8); ',
    'z-index: 10; ',
    '">CLIF</div>',
    
    '</div>',
    
    # Percentage display
    '<div style="font-size: 1.2rem; font-weight: 700; color: ', liquid_color, '; margin-bottom: 0.25rem;">',
    completion, '%',
    '</div>',
    
    # Tables info
    '<div style="font-size: 0.65rem; color: #6c757d; text-align: center;">',
    complete_tables, '/', total_tables, ' tables',
    '</div>',
    
    '</div>'
  )
}

# Calculate overall consortium progress
total_completed <- sum(site_summary$complete_tables)
total_possible <- sum(site_summary$total_tables)
overall_completion <- round((total_completed / total_possible) * 100)

# Generate single master cylinder at top center
master_cylinder_html <- paste0(
  '<div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 12px; margin: 1rem 0; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">',
  
  # Header
  '<div style="margin-bottom: 2rem;">',
  '<h3 style="color: #7d1538; font-size: 1.6rem; font-weight: 700; margin-bottom: 0.5rem;">CLIF Consortium Overall Progress</h3>',
  '<p style="color: #6c757d; font-size: 0.9rem; margin: 0;">Federated longitudinal ICU data harmonization</p>',
  '</div>',
  
  # Single large master cylinder centered
  '<div style="display: inline-block;">',
  '<div style="position: relative; width: 150px; height: 220px; margin: 0 auto 1rem;">',
  
  # Cylinder body
  '<div style="position: absolute; bottom: 0; left: 25px; width: 100px; height: 180px; background: linear-gradient(90deg, #f8f9fa 0%, #ffffff 50%, #f1f3f4 100%); border: 4px solid #dee2e6; border-radius: 0 0 15px 15px; box-shadow: inset 4px 0 8px rgba(0,0,0,0.1);"></div>',
  
  # Liquid fill - overall progress
  '<div style="position: absolute; bottom: 4px; left: 29px; width: 92px; height: ', (overall_completion * 1.72), 'px; background: linear-gradient(90deg, #7d1538 0%, #983248 50%, #7d1538 100%); border-radius: 0 0 11px 11px; opacity: 0.9; transition: height 1s ease-in-out;"></div>',
  
  # Cylinder top
  '<div style="position: absolute; top: 0; left: 25px; width: 100px; height: 40px; background: linear-gradient(90deg, #e9ecef 0%, #ffffff 50%, #e9ecef 100%); border: 4px solid #dee2e6; border-radius: 50%; box-shadow: 0 4px 8px rgba(0,0,0,0.15);"></div>',
  
  # CLIF Label
  '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 1.1rem; font-weight: 700; color: #7d1538; text-shadow: 1px 1px 2px rgba(255,255,255,0.8); z-index: 10;">CLIF<br><span style="font-size: 0.7rem;">CONSORTIUM</span></div>',
  
  '</div>',
  
  # Master stats below cylinder
  '<div style="margin-top: 1rem;">',
  '<div style="font-size: 2.5rem; font-weight: 700; color: #7d1538; margin-bottom: 0.5rem;">', overall_completion, '%</div>',
  '<div style="font-size: 1rem; color: #6c757d; margin-bottom: 0.5rem;">', total_completed, ' of ', total_possible, ' tables complete</div>',
  '<div style="font-size: 0.8rem; color: #7d1538; font-weight: 600;">Federated Research Dataset</div>',
  '<div style="font-size: 0.75rem; color: #999; margin-top: 1rem;">Last Updated: ', format(as.POSIXct(status_summary$last_updated), "%B %d, %Y at %I:%M %p"), '</div>',
  '</div>',
  
  '</div>',
  '</div>'
)

htmltools::HTML(master_cylinder_html)
```

### Site Progress & Status Matrix {width=80%} 
```{=html}
<style>
body, html {
  height: 100vh !important;
  margin: 0 !important;
  padding: 0 !important;
  overflow-x: hidden !important;
}

.dashboard-page {
  height: 100vh !important;
  min-height: 100vh !important;
}

.bslib-grid {
  height: 100% !important;
}

.bslib-card {
  height: calc(100vh - 120px) !important;
  min-height: calc(100vh - 120px) !important;
}

.card-body {
  height: 100% !important;
  padding: 1rem !important;
  display: flex !important;
  flex-direction: column !important;
}

#consolidated-status-matrix_wrapper {
  height: calc(100vh - 200px) !important;
  min-height: calc(100vh - 200px) !important;
  flex: 1 !important;
}

#consolidated-status-matrix {
  height: 100% !important;
}

.dataTables_scrollBody {
  height: calc(100vh - 280px) !important;
  min-height: calc(100vh - 280px) !important;
}

.dataTables_info,
.dataTables_paginate,
.dataTables_filter,
.dataTables_length,
input[type="search"],
.form-control[type="search"] {
  display: none !important;
}
</style>
```

```{r consolidated-status-matrix}
library(DT)

# Define site order
site_order <- c("ucsf", "university_michigan", "emory", "oregon_health_science", 
                "northwestern", "university_chicago", "johns_hopkins", "rush")

# Create mini cylinders positioned to align with table columns
mini_cylinders_html <- paste0(
  '<div style="margin-bottom: 0; padding: 0;">',
  '<table style="width: 100%; border-collapse: collapse; margin: 0; table-layout: fixed;">',
  '<tr style="background: #f8f9fa; border: 1px solid #dee2e6; border-bottom: none;">',
  
  # Empty cell for table name column - exactly matching DataTable
  '<td style="width: 180px; padding: 2.75rem; text-align: left; font-size: 0.8rem; font-weight: 600; color: #495057; border-right: 1px solid #dee2e6; box-sizing: border-box;">Site Progress</td>',
  
  # Mini cylinders for each site - matching DataTable column widths exactly
  paste(sapply(site_order, function(site_id) {
    if(site_id %in% names(site_status_list)) {
      site_data <- site_status_list[[site_id]]
      site_name <- gsub("University", "Univ.", site_data$site_name)
      site_name <- gsub("Health & Science", "H&S", site_name)
      site_name <- gsub("California San Francisco", "Cal SF", site_name)
      
      # Get site completion
      site_info <- site_summary[site_summary$site_name == site_data$site_name, ]
      completion <- if(nrow(site_info) > 0) site_info$completion else 0
      complete_tables <- if(nrow(site_info) > 0) site_info$complete_tables else 0
      total_tables <- if(nrow(site_info) > 0) site_info$total_tables else 1
      
      # Determine cylinder color
      cylinder_color <- if(completion == 100) '#7d1538' else if(completion >= 75) '#983248' else if(completion >= 50) '#c4898d' else '#f5e6d8'
      
      paste0(
        '<td style="width: 120px; padding: 0.5rem; text-align: center; border-right: 1px solid #dee2e6; box-sizing: border-box;">',
        
        # Mini cylinder
        '<div style="position: relative; width: 30px; height: 45px; margin: 0 auto 0.5rem; display: inline-block;">',
        
        # Cylinder body
        '<div style="position: absolute; bottom: 0; left: 2px; width: 26px; height: 35px; background: linear-gradient(90deg, #f8f9fa 0%, #ffffff 50%, #f1f3f4 100%); border: 2px solid #dee2e6; border-radius: 0 0 4px 4px; box-shadow: inset 1px 0 2px rgba(0,0,0,0.1);"></div>',
        
        # Fill
        '<div style="position: absolute; bottom: 2px; left: 4px; width: 22px; height: ', (completion * 0.31), 'px; background: ', cylinder_color, '; border-radius: 0 0 2px 2px; opacity: 0.9; transition: height 0.8s ease-in-out;"></div>',
        
        # Top
        '<div style="position: absolute; top: 0; left: 2px; width: 26px; height: 10px; background: linear-gradient(90deg, #e9ecef 0%, #ffffff 50%, #e9ecef 100%); border: 2px solid #dee2e6; border-radius: 50%;"></div>',
        
        '</div>',
        
        # Stats below cylinder
        '<div style="font-size: 0.8rem; color: ', cylinder_color, '; font-weight: 700; margin-bottom: 0.25rem;">', completion, '%</div>',
        '<div style="font-size: 0.6rem; color: #6c757d;">', complete_tables, '/', total_tables, '</div>',
        
        '</td>'
      )
    } else {
      return("")
    }
  }), collapse = ""),
  
  '</tr>',
  '</table>',
  '</div>'
)

htmltools::HTML(mini_cylinders_html)

# Get all unique table names
all_tables <- unique(c(
  names(site_status_list$emory$tables),
  names(site_status_list$johns_hopkins$tables),
  names(site_status_list$northwestern$tables),
  names(site_status_list$oregon_health_science$tables),
  names(site_status_list$rush$tables),
  names(site_status_list$ucsf$tables),
  names(site_status_list$university_chicago$tables),
  names(site_status_list$university_michigan$tables)
))

# Start with table names as first column
matrix_data <- data.frame(
  `Table Name` = tools::toTitleCase(gsub("_", " ", all_tables)),
  stringsAsFactors = FALSE
)

# Add a column for each site
for(site_id in site_order) {
  if(site_id %in% names(site_status_list)) {
    site_data <- site_status_list[[site_id]]
    site_name <- gsub("University", "Univ.", site_data$site_name)
    site_name <- gsub("Health & Science", "H&S", site_name)
    site_name <- gsub("California San Francisco", "Cal SF", site_name)
    
    site_column <- character(length(all_tables))
    
    # Add status for each table
    for(i in seq_along(all_tables)) {
      table_name <- all_tables[i]
      if(table_name %in% names(site_data$tables)) {
        table_info <- site_data$tables[[table_name]]
        site_column[i] <- create_status_cell(table_info$status, table_info$completeness_score)
      } else {
        site_column[i] <- create_status_cell("Not started", 0)
      }
    }
    
    matrix_data[[site_name]] <- site_column
  }
}

# Create custom column headers with mini cylinders
create_column_headers <- function() {
  headers <- c("Table Name")
  
  for(site_id in site_order) {
    if(site_id %in% names(site_status_list)) {
      site_data <- site_status_list[[site_id]]
      site_name <- gsub("University", "Univ.", site_data$site_name)
      site_name <- gsub("Health & Science", "H&S", site_name)
      site_name <- gsub("California San Francisco", "Cal SF", site_name)
      
      # Get site completion
      site_info <- site_summary[site_summary$site_name == site_data$site_name, ]
      completion <- if(nrow(site_info) > 0) site_info$completion else 0
      complete_tables <- if(nrow(site_info) > 0) site_info$complete_tables else 0
      total_tables <- if(nrow(site_info) > 0) site_info$total_tables else 1
      
      # Determine cylinder color
      cylinder_color <- if(completion == 100) '#7d1538' else if(completion >= 75) '#983248' else if(completion >= 50) '#c4898d' else '#f5e6d8'
      
      # Create header with mini cylinder
      header_html <- paste0(
        '<div style="text-align: center; padding: 0.5rem;">',
        
        # Mini cylinder above site name
        '<div style="position: relative; width: 25px; height: 35px; margin: 0 auto 0.5rem; display: inline-block;">',
        
        # Cylinder body
        '<div style="position: absolute; bottom: 0; left: 2px; width: 21px; height: 28px; background: linear-gradient(90deg, #f8f9fa 0%, #ffffff 50%, #f1f3f4 100%); border: 1px solid #dee2e6; border-radius: 0 0 3px 3px; box-shadow: inset 1px 0 2px rgba(0,0,0,0.1);"></div>',
        
        # Fill
        '<div style="position: absolute; bottom: 1px; left: 3px; width: 19px; height: ', (completion * 0.26), 'px; background: ', cylinder_color, '; border-radius: 0 0 2px 2px; opacity: 0.9;"></div>',
        
        # Top
        '<div style="position: absolute; top: 0; left: 2px; width: 21px; height: 7px; background: linear-gradient(90deg, #e9ecef 0%, #ffffff 50%, #e9ecef 100%); border: 1px solid #dee2e6; border-radius: 50%;"></div>',
        
        '</div>',
        
        # Site name and stats
        '<div style="font-size: 0.8rem; font-weight: 600; color: #343a40; margin-bottom: 0.25rem;">', site_name, '</div>',
        '<div style="font-size: 0.7rem; color: ', cylinder_color, '; font-weight: 600;">', completion, '%</div>',
        '<div style="font-size: 0.6rem; color: #6c757d;">', complete_tables, '/', total_tables, '</div>',
        
        '</div>'
      )
      
      headers <- c(headers, header_html)
    }
  }
  
  return(headers)
}

# Get custom headers
custom_headers <- create_column_headers()

# Create the consolidated table with custom headers
datatable(matrix_data,
          elementId = "consolidated-status-matrix",
          options = list(
            pageLength = -1,
            scrollX = FALSE,
            scrollY = "calc(100vh - 280px)",
            dom = 't',
            order = list(list(0, 'asc')),
            columnDefs = list(
              list(className = 'dt-left', targets = 0),
              list(className = 'dt-center', targets = 1:(ncol(matrix_data)-1)),
              list(width = '180px', targets = 0),
              list(width = '120px', targets = 1:(ncol(matrix_data)-1))
            ),
            autoWidth = FALSE,
            initComplete = JS(
              "function(settings, json) {",
              "$(this.api().table().header()).css({",
              "'background-color': '#343a40',",
              "'color': 'white',",
              "'font-weight': '600',",
              "'font-size': '0.9rem',",
              "'border-bottom': '2px solid #495057'",
              "});",
              "}"
            ),
            rowCallback = JS(
              "function(row, data) {",
              "$(row).css({",
              "'background-color': '#ffffff',",
              "'border-bottom': '1px solid #dee2e6'",
              "});",
              "$(row).find('td:first').css({",
              "'font-weight': '600',",
              "'color': '#343a40',",
              "'background-color': '#f8f9fa',",
              "'border-right': '2px solid #dee2e6'",
              "});",
              "$(row).hover(function() {",
              "$(this).css('background-color', '#f1f3f4');",
              "}, function() {",
              "$(this).css('background-color', '#ffffff');",
              "});",
              "}"
            )
          ),
          class = 'table table-bordered table-hover compact',
          rownames = FALSE,
          filter = 'none',
          extensions = c('Buttons', 'FixedHeader'),
          escape = FALSE,
          style = 'bootstrap4',
          container = tags$table(
            class = "display",
            style = "border-top: none; margin-top: 0;",
            tags$thead(
              style = "background-color: #343a40; color: white;",
              tags$tr(
                style = "border-top: none;",
                lapply(names(matrix_data), function(name) {
                  if(name == "Table.Name") {
                    tags$th(name, style = "text-align: left; padding: 0.75rem; font-weight: 600;")
                  } else {
                    tags$th(name, style = "text-align: center; padding: 0.75rem; font-weight: 600; width: 100px;")
                  }
                })
              )
            )
          ))

# Add the status legend at the bottom of the matrix section
legend_html <- '<div style="margin-top:0.25rem; background:#f8f9fa; border:1px solid #dee2e6; border-radius:4px; padding:0.4rem;">
  <h6 style="margin-top:0.2in; margin-bottom:0.25rem; color:#495057; font-size:1.05rem; font-weight:700; text-align:center;">Status Legend</h6>
  <div style="display:flex; flex-direction:row; gap:1.5rem; justify-content:center; align-items:center; flex-wrap:wrap;">
    <div style="display:flex; align-items:center; font-size:1rem;">
      <span style="display:inline-block; width:18px; height:18px; background:#7d1538; border:1.5px solid #5d1028; margin-right:8px;"></span>
      <strong>Complete</strong> <span style="color:#666; margin-left:5px;">(All requirements met)</span>
    </div>
    <div style="display:flex; align-items:center; font-size:1rem;">
      <span style="display:inline-block; width:18px; height:18px; background:#983248; border:1.5px solid #7d1538; margin-right:8px;"></span>
      <strong>In Progress</strong> <span style="color:#666; margin-left:5px;">(Most data available)</span>
    </div>
    <div style="display:flex; align-items:center; font-size:1rem;">
      <span style="display:inline-block; width:18px; height:18px; background:#c4898d; border:1.5px solid #983248; margin-right:8px;"></span>
      <strong>Partial</strong> <span style="color:#666; margin-left:5px;">(Some data available)</span>
    </div>
    <div style="display:flex; align-items:center; font-size:1rem;">
      <span style="display:inline-block; width:22px; height:22px; background:#f5e6d8; border:1.5px solid #e0c4a8; margin-right:10px;"></span>
      <strong>Not Started</strong> <span style="color:#666; margin-left:6px;">(No data available)</span>
    </div>
  </div>
</div>'

htmltools::HTML(legend_html)
```


# Data

```{r site-data-table}
#| warning: false
library(DT)

# Read the full dataset
site_data <- read.csv("data/final_website_data.csv", check.names = FALSE)

# Create an interactive table
datatable(site_data,
          options = list(
            pageLength = 15,
            scrollX = TRUE,
            dom = 'Bfrtip',
            buttons = c('copy', 'csv', 'excel'),
            initComplete = JS(
              "function(settings, json) {",
              "$(this.api().table().header()).css({'background-color': '#f8f9fa', 'color': '#983232'});",
              "}"
            )
          ),
          class = 'cell-border stripe',
          rownames = FALSE,
          filter = 'top',
          extensions = c('Buttons', 'FixedHeader'),
          style = 'bootstrap') %>%
  formatStyle(names(site_data),
             backgroundColor = '#ffffff',
             borderBottom = '1px solid #ddd')
```

The table above shows the complete dataset used to construct this dashboard. Currently there are eleven health systems within the CLIF consortium. We also have a pipeline from MIMIC-IV to CLIF. The distribution of CLIF'ed  is also represented above.
